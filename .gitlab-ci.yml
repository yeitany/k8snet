# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml
image: golang:latest
stages:          # List of stages for jobs, and their order of execution
  - lint
  - test
  - build

lint-test-job:   # This job also runs in the test stage.
  stage: lint    # It can run at the same time as unit-test-job (in parallel).
  script:
    - make lint

unit-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  script:
    - echo "Running unit tests... This will take about 60 seconds."
    - sleep 60
    - echo "Code coverage is 90%"

build-job:       # This job runs in the build stage, which runs first.
  artifacts:
    paths:
      - .bin/
  stage: build
  script:
    - make build

build-image:
  stage: build
  dependencies:
    - build-job
  script:
    - echo "Deploying application..."
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build -t $CI_REGISTRY/ybot/project/k8snet:latest .
    - docker push $CI_REGISTRY/ybot/k8snet/k8snet:latest
    - echo "Compile complete."

